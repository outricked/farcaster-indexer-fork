"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetTokenBalanceQuery = void 0;
var GetTokenBalanceQuery = function () {
    return "query tokens($address: Identity!) {\n  erc20: TokenBalances(\n    input: {filter: {owner: {_in: [$address]}, tokenType: {_in: [ERC20]}}, limit: 10, blockchain: ethereum}\n  ) {\n    data: TokenBalance {\n      amount\n      formattedAmount\n      chainId\n      id\n      tokenAddress\n      tokenId\n      tokenType\n      token {\n        name\n        symbol\n      }\n    }\n  }\n  erc721: TokenBalances(\n    input: {filter: {owner: {_in: [$address]}, tokenType: {_in: [ERC721]}, tokenAddress: {_nin: [\"0x22C1f6050E56d2876009903609a2cC3fEf83B415\"]}}, limit: 10, blockchain: ethereum}\n  ) {\n    data: TokenBalance {\n      amount\n      chainId\n      id\n      tokenAddress\n      tokenId\n      tokenType\n      token {\n        name\n        symbol\n      }\n      tokenNfts {\n        tokenId\n        metaData {\n          name\n        }\n        contentValue {\n          image {\n            medium\n            extraSmall\n            large\n            original\n            small\n          }\n        }\n      }\n    }\n  }\n  poap: TokenBalances(\n    input: {filter: {owner: {_in: [$address]}, tokenAddress: {_eq: \"0x22C1f6050E56d2876009903609a2cC3fEf83B415\"}}, limit: 10, blockchain: ethereum}\n  ) {\n    data: TokenBalance {\n      amount\n      tokenAddress\n      tokenId\n      tokenType\n      token {\n        name\n        symbol\n      }\n      tokenNfts {\n        metaData {\n          name\n        }\n        tokenURI\n      }\n    }\n  }\n}";
};
exports.GetTokenBalanceQuery = GetTokenBalanceQuery;
